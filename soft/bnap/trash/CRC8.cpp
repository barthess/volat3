//============================================================================
//  Вычисление контрольной суммы CRC8 табличным способом                      
//============================================================================
//                                                            
//============================================================================

#include <RTL.h>
//----------------------------------------------------------------------------

// CRC8 отдельных битов для порождающего полинома  0x97  10010111 1
// P(x) = X8 + X5 + X3 + X2 + X + 1
//   100000000
//   100101111
//      101111          0x2F
//      1011110         0x5E
//      10111100        0xBC
//
//      101111000
//      100101111
//        1010111       0x57
//        10101110      0xAE
//
//        101011100
//        100101111
//          1110011     0x73
//          11100110    0xE6
//
//          111001100
//          100101111
//           11100011   0xE3
//
#define a0 0x2F
#define a1 0x5E
#define a2 0xBC
#define a3 0x57
#define a4 0xAE
#define a5 0x73
#define a6 0xE6
#define a7 0xE3

// Макрос для формирования таблицы контрольных сум отдельных байтов 
#define C(X) ((((X >> 0)& 1) == 0 ? 0:a0) ^ (((X >> 1)& 1) == 0 ? 0:a1) ^ \
              (((X >> 2)& 1) == 0 ? 0:a2) ^ (((X >> 3)& 1) == 0 ? 0:a3) ^ \
              (((X >> 4)& 1) == 0 ? 0:a4) ^ (((X >> 5)& 1) == 0 ? 0:a5) ^ \
              (((X >> 6)& 1) == 0 ? 0:a6) ^ (((X >> 7)& 1) == 0 ? 0:a7)) 

// Таблица контрольных сумм
const U8 CRCTable[256] = {\
C(0),   C(1),   C(2),   C(3),   C(4),   C(5),   C(6),   C(7),   C(8),   C(9),\
C(10),  C(11),  C(12),  C(13),  C(14),  C(15),  C(16),  C(17),  C(18),  C(19),\
C(20),  C(21),  C(22),  C(23),  C(24),  C(25),  C(26),  C(27),  C(28),  C(29),\
C(30),  C(31),  C(32),  C(33),  C(34),  C(35),  C(36),  C(37),  C(38),  C(39),\
C(40),  C(41),  C(42),  C(43),  C(44),  C(45),  C(46),  C(47),  C(48),  C(49),\
C(50),  C(51),  C(52),  C(53),  C(54),  C(55),  C(56),  C(57),  C(58),  C(59),\
C(60),  C(61),  C(62),  C(63),  C(64),  C(65),  C(66),  C(67),  C(68),  C(69),\
C(70),  C(71),  C(72),  C(73),  C(74),  C(75),  C(76),  C(77),  C(78),  C(79),\
C(80),  C(81),  C(82),  C(83),  C(84),  C(85),  C(86),  C(87),  C(88),  C(89),\
C(90),  C(91),  C(92),  C(93),  C(94),  C(95),  C(96),  C(97),  C(98),  C(99),\
C(100), C(101), C(102), C(103), C(104), C(105), C(106), C(107), C(108), C(109),\
C(110), C(111), C(112), C(113), C(114), C(115), C(116), C(117), C(118), C(119),\
C(120), C(121), C(122), C(123), C(124), C(125), C(126), C(127), C(128), C(129),\
C(130), C(131), C(132), C(133), C(134), C(135), C(136), C(137), C(138), C(139),\
C(140), C(141), C(142), C(143), C(144), C(145), C(146), C(147), C(148), C(149),\
C(150), C(151), C(152), C(153), C(154), C(155), C(156), C(157), C(158), C(159),\
C(160), C(161), C(162), C(163), C(164), C(165), C(166), C(167), C(168), C(169),\
C(170), C(171), C(172), C(173), C(174), C(175), C(176), C(177), C(178), C(179),\
C(180), C(181), C(182), C(183), C(184), C(185), C(186), C(187), C(188), C(189),\
C(190), C(191), C(192), C(193), C(194), C(195), C(196), C(197), C(198), C(199),\
C(200), C(201), C(202), C(203), C(204), C(205), C(206), C(207), C(208), C(209),\
C(210), C(211), C(212), C(213), C(214), C(215), C(216), C(217), C(218), C(219),\
C(220), C(221), C(222), C(223), C(224), C(225), C(226), C(227), C(228), C(229),\
C(230), C(231), C(232), C(233), C(234), C(235), C(236), C(237), C(238), C(239),\
C(240), C(241), C(242), C(243), C(244), C(245), C(246), C(247), C(248), C(249),\
C(250), C(251), C(252), C(253), C(254), C(255)};

#undef a0
#undef a1
#undef a2
#undef a3
#undef a4
#undef a5
#undef a6
#undef a7
#undef C
//---------------------------------------------------------------------------- 

// Число байтов в блоке = ucSize + 1
U8 CRC8(const U8 * ucBUF, U8 ucSize)
{
  U8 crc = 0;
  U8 ucCount = 255;
  do crc =  CRCTable[crc ^ ucBUF[++ucCount]]; while(ucCount < ucSize);
  return crc;
}
//----------------------------------------------------------------------------
